// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`destructuring array-assignment-function-block 1`] = `
"(function(modules) {
  function require(id) {
    const [fn, mapping] = modules[id];

    function localRequire(name) {
      return require(mapping[name]);
    }

    const module = {
      exports: {}
    };

    fn(localRequire, module, module.exports);

    return module.exports;
  }

  require(0)
})({
  0: [
    function(require, module, exports) {
      function c() {
        var a = 1,
          b = 2;
      }

      ;
    },
    {},
  ]
})"
`;

exports[`destructuring array-basic 1`] = `
"(function(modules) {
  function require(id) {
    const [fn, mapping] = modules[id];

    function localRequire(name) {
      return require(mapping[name]);
    }

    const module = {
      exports: {}
    };

    fn(localRequire, module, module.exports);

    return module.exports;
  }

  require(0)
})({
  0: [
    function(require, module, exports) {
      var a = 1,
        b = '2',
        c = true;
      const d = 1,
        e = '2',
        f = true;
      let g = 1,
        h = '2',
        i = true;
    },
    {},
  ]
})"
`;

exports[`destructuring array-overflow 1`] = `
"(function(modules) {
  function require(id) {
    const [fn, mapping] = modules[id];

    function localRequire(name) {
      return require(mapping[name]);
    }

    const module = {
      exports: {}
    };

    fn(localRequire, module, module.exports);

    return module.exports;
  }

  require(0)
})({
  0: [
    function(require, module, exports) {
      var _ref = [1, '2', true, null, undefined, function() {}, Error, WebAssembly],
        a = _ref[0],
        b = _ref[1],
        c = _ref[2];
      var _ref2 = [1, '2', true, null, undefined, function() {}, Error, WebAssembly],
        d = _ref2[0],
        e = _ref2[1],
        f = _ref2[2];
      var _ref3 = [1, '2', true, null, undefined, function() {}, Error, WebAssembly],
        g = _ref3[0],
        h = _ref3[1],
        i = _ref3[2];
    },
    {},
  ]
})"
`;

exports[`destructuring array-rest-basic 1`] = `
"(function(modules) {
  function require(id) {
    const [fn, mapping] = modules[id];

    function localRequire(name) {
      return require(mapping[name]);
    }

    const module = {
      exports: {}
    };

    fn(localRequire, module, module.exports);

    return module.exports;
  }

  require(0)
})({
  0: [
    function(require, module, exports) {
      var a = 1,
        b = '2',
        c = [true, null, undefined, function() {}, Error, WebAssembly];
      const d = 1,
        e = '2',
        f = [true, null, undefined, function() {}, Error, WebAssembly];
      let g = 1,
        h = '2',
        i = [true, null, undefined, function() {}, Error, WebAssembly];
    },
    {},
  ]
})"
`;

exports[`destructuring array-rest-nested 1`] = `
"(function(modules) {
  function require(id) {
    const [fn, mapping] = modules[id];

    function localRequire(name) {
      return require(mapping[name]);
    }

    const module = {
      exports: {}
    };

    fn(localRequire, module, module.exports);

    return module.exports;
  }

  require(0)
})({
  0: [
    function(require, module, exports) {
      var a = 1,
        b = '2',
        c = [true, null, undefined],
        d = [function() {}, Error, WebAssembly];
    },
    {},
  ]
})"
`;

exports[`destructuring array-self-reference 1`] = `
"(function(modules) {
  function require(id) {
    const [fn, mapping] = modules[id];

    function localRequire(name) {
      return require(mapping[name]);
    }

    const module = {
      exports: {}
    };

    fn(localRequire, module, module.exports);

    return module.exports;
  }

  require(0)
})({
  0: [
    function(require, module, exports) {
      var d;
      var _ref = [1, a, b, d],
        a = _ref[0],
        b = _ref[1],
        c = _ref[2];
      var a = 1,
        b = \\"a\\",
        c = \\"b\\";
    },
    {},
  ]
})"
`;

exports[`destructuring object-basic 1`] = `
"(function(modules) {
  function require(id) {
    const [fn, mapping] = modules[id];

    function localRequire(name) {
      return require(mapping[name]);
    }

    const module = {
      exports: {}
    };

    fn(localRequire, module, module.exports);

    return module.exports;
  }

  require(0)
})({
  0: [
    function(require, module, exports) {
      var _a$b$c = {
          a: 1,
          b: '2',
          c: true
        },
        a = _a$b$c.a,
        b = _a$b$c.b,
        c = _a$b$c.c;
      var _d$e$f = {
          d: 1,
          e: '2',
          f: true
        },
        d = _d$e$f.d,
        e = _d$e$f.e,
        f = _d$e$f.f;
      var _g$h$i = {
          g: 1,
          h: '2',
          i: true
        },
        g = _g$h$i.g,
        h = _g$h$i.h,
        i = _g$h$i.i;
    },
    {},
  ]
})"
`;

exports[`destructuring object-rest-basic 1`] = `
"(function(modules) {
  function require(id) {
    const [fn, mapping] = modules[id];

    function localRequire(name) {
      return require(mapping[name]);
    }

    const module = {
      exports: {}
    };

    fn(localRequire, module, module.exports);

    return module.exports;
  }

  require(0)
})({
  0: [
    function(require, module, exports) {
      function _objectWithoutProperties(source, excluded) {
        if (source == null) return {};

        var target = _objectWithoutPropertiesLoose(source, excluded);

        var key, i;

        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }

        return target;
      }

      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;

        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }

        return target;
      }

      var _a$b$x = {
          a: 1,
          b: '2',
          c: true,
          d: null,
          e: undefined,
          f: function() {},
          g: Error,
          h: WebAssembly
        },
        a = _a$b$x.a,
        b = _a$b$x.b,
        x = _objectWithoutProperties(_a$b$x, [\\"a\\", \\"b\\"]);

      var _d$e$y = {
          a: 1,
          b: '2',
          c: true,
          d: null,
          e: undefined,
          f: function() {},
          g: Error,
          h: WebAssembly
        },
        d = _d$e$y.d,
        e = _d$e$y.e,
        y = _objectWithoutProperties(_d$e$y, [\\"d\\", \\"e\\"]);

      var _m$n$z = {
          a: 1,
          b: '2',
          c: true,
          d: null,
          e: undefined,
          f: function() {},
          g: Error,
          h: WebAssembly
        },
        m = _m$n$z.m,
        n = _m$n$z.n,
        z = _objectWithoutProperties(_m$n$z, [\\"m\\", \\"n\\"]);
    },
    {},
  ]
})"
`;

exports[`destructuring object-rest-nested 1`] = `
"(function(modules) {
  function require(id) {
    const [fn, mapping] = modules[id];

    function localRequire(name) {
      return require(mapping[name]);
    }

    const module = {
      exports: {}
    };

    fn(localRequire, module, module.exports);

    return module.exports;
  }

  require(0)
})({
  0: [
    function(require, module, exports) {
      function _objectWithoutProperties(source, excluded) {
        if (source == null) return {};

        var target = _objectWithoutPropertiesLoose(source, excluded);

        var key, i;

        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }

        return target;
      }

      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;

        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }

        return target;
      }

      var _a$b$c$d = {
          a: 1,
          b: {
            b1: '2'
          },
          c: {
            c1: true,
            c2: null,
            c3: undefined
          },
          d: {
            d1: {
              d2: function() {}
            }
          },
          e: Error,
          f: WebAssembly
        },
        a = _a$b$c$d.a,
        b = _a$b$c$d.b,
        c = _a$b$c$d.c,
        d = _objectWithoutProperties(_a$b$c$d, [\\"a\\", \\"b\\", \\"c\\"]);
    },
    {},
  ]
})"
`;
